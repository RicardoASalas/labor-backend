***************************************************
* CREACION DE BASE DE DATOS Y MIGRACIÓN DE TABLAS *                        
***************************************************

* Para crear la base de datos, escribir el siguiente comando en la consola:
    
    - $ php artisan make:database laborDB mysql utf8mb4-unicode


***********************
* MIGRACIÓN DE TABLAS *                        
***********************


* Para crear la migraciones, escribir los siguientes comandos en la consola:

    - $ php artisan make:migration crear_tabla_users --create=users
        
    - $ php artisan make:migration crear_tabla_offers --create=offers

    - $ php artisan make:migration crear_tabla_users_offers --create=users_offers

    Esto creara una plantilla para definir las tablas que luego serán creadas en la DB.
    

* Para crear las relaciones entre las tablas 'users' y 'offers', escribir el schema de la tablas
  intermedia 'users_ofers' de esta manera:

        Schema::create('users_offers', function (Blueprint $table) {
            $table->bigInteger('user_id')->unsigned();
            $table->bigInteger('offer_id')->unsigned();
            $table->string('status');
            $table->timestamps();

            $table->foreign('user_id')->references('id')->on('users');
            $table->foreign('offer_id')->references('id')->on('offers');
        });

(Las migraciones ya están creadas y sus schemas definidos en este proyecto, solo es necesario ejecutarlas)


* Para ejecutar las migraciones y crear las tablas ejecutar el siguiente comando en la consola:
 
    - $ php artisan migrate


*****************
* CREAR MODELOS *                        
*****************

* Para crear los modelos ejecutar el siguiente comando en la consola:

    -$ php artisan make:model User 
    -$ php artisan make:model Offer

* Para relacionar las tablas se define la relacion en el modelo:

    -Ejem: en el Modelo User se añade la funcion dentro de la clase:
         public function offer()
        {
            return $this->belongsToMany('App\Models\Offer', 'users_offers', 'user_id', 'offer_id');
        }
* Si los modelos se almacenan en una carpeta a parte hay que cambiar el namespace de config/auth.php y en el propio 
    Modelo User.php si se ha usado el que viene predefinido en Laravel.

    (Los modelos ya estan creados y definidos para este proyecto)


*****************
* CONTROLADORES *                        
*****************

* Se crea un controlador por cada tabla de la base de datos escribiendo en el terminal el siguiente comando:

    - $ php artisan make:controller UserController

*Esto creara un archivo PHP en la carpeta Controllers/ donde se creara una estructura predefinida para todos
 los métodos del controlador.


*****************
*     RUTAS     *                        
*****************

* Las rutas de los metodos se definen en el fichero routes/api.php, este fichero lo crea composer automaticamente
en la estructura del proyecto laravel.

* Se definen los metodos como metodos estaticos de la clase Route de esta manera:

    - Route::post('/register','UserController@insert');

    En este caso es un metodo post que crea un nuevo usuario mediante el controlador UserController y la funcion insert
    a través de la ruta /register.


*****************
*   POSTMAN     *                        
*****************

* Los endpoints se pueden testear con postman en la siguiente direccion:

    - http://localhost:8000/api/register









